[
  {
    "objectID": "notebooks/titanic.html",
    "href": "notebooks/titanic.html",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "Ce tutoriel repose sur les donn√©es et le d√©fi exemple de la communaut√© kaggle sur les donn√©es du titanic.\nIl s‚Äôagit √† partir de la liste des passagers du titanic et de leur survie ou non de pr√©dire la chance de survie d‚Äôun individu en fonction de son nom, age, sexe, situation familiale, √©conomique‚Ä¶\nCe notebook est inspir√© par https://www.kaggle.com/mukultiwari/titanic-top-14-with-random-forest\n::: {#cell-1 .cell _cell_guid=‚Äòb11366bd-b985-4df1-9630-b2d57f60d0f0‚Äô _uuid=‚Äò2da21fe9ea560ec76cded00d85f84caa7932a126‚Äô tags=‚Äò[]‚Äô execution_count=1}\nimport pandas as pd ; import numpy as np\nimport matplotlib.pyplot as plt\nimport multiprocessing\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nimport pathlib\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nimport time\n%matplotlib inline\n#import warnings\n#warnings.filterwarnings('ignore')\n:::\n\n\nOn va utiliser la librairie pandas pour lire les donn√©es, on y a d√©pos√© le jeu de donn√©e disponible sur Kaggle :\n\nle train.csv contient les donn√©es d‚Äôapprentissage, c‚Äôest-√†-dire les variables d√©crivants des individus et s‚Äôils ont surv√©cus ou non ;\nle test.csv contient uniquement la description d‚Äôindividu dont il faut pr√©dire les chances de survie.\n\n::: {#cell-3 .cell _cell_guid=‚Äò096ddef0-fc1a-4a65-bd56-82e5b3ef3d96‚Äô _uuid=‚Äòfdcb49f7845aae42bceb3216b3a2f09374c762ba‚Äô tags=‚Äò[]‚Äô execution_count=43}\nimport os\n#print(os.getcwd())\nos.chdir('/home/coder/work/ensae-reproductibilite-application')\n\nTrainingData = pd.read_csv('train.csv')\nTestData = pd.read_csv('test.csv')\nTrainingData = TrainingData.drop(columns = \"PassengerId\")\nTestData = TestData.drop(columns = \"PassengerId\")\n:::\n::: {#cell-4 .cell _cell_guid=‚Äòb02f3b71-dd0f-4c22-8e48-fc4ee8616e21‚Äô _uuid=‚Äò5ceeb0b9a9ddd42db685a5e5f0503e01788a016a‚Äô tags=‚Äò[]‚Äô execution_count=44}\nTrainingData.head()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n:::\nAvec la m√©thode .info, on pourrait v√©rifier que notre dataset a :\n\n7 variables num√©riques : PassengerId, Survived, Pclass, Age, SibSp, Parch, Fare\n\ndont PassengerId qui est l‚Äôidentifiant du passager dans le dataset\ndont Survived qui est la variable √† pr√©dire la variable ‚Äúcible‚Äù\ndont PClass qui est une indication de la strate socio √©conomique\ndont SibSp et Parch qui permettent de d√©terminer la situation familiale (√©poux, m√®re, fille‚Ä¶)\nFare qui est un prix.\n\n5 variables non num√©riques : Name, Sex, Ticket un identifiant de ticket, Cabin un identifiant de cabin, Embarked le port d‚Äôembarquation (C = Cherbourg, Q = Queenstown, S = Southampton)\n\nRecherchons s‚Äôil y a des valeurs manquantes dans ces 2 datasets\n\n\n\n::: {#cell-7 .cell _cell_guid=‚Äòf6bd235e-5670-4d21-b0eb-bececfc1757a‚Äô _uuid=‚Äò6c44f4bd0762061bedd908dcbe854b14ae9f0966‚Äô tags=‚Äò[]‚Äô execution_count=45}\nTrainingData.isnull().sum()\n\nSurvived      0\nPclass        0\nName          0\nSex           0\nAge         177\nSibSp         0\nParch         0\nTicket        0\nFare          0\nCabin       687\nEmbarked      2\ndtype: int64\n\n:::\n::: {#cell-8 .cell _cell_guid=‚Äòb12b1a12-5563-44ef-90a7-4a77b0a0d3f3‚Äô _uuid=‚Äò7f46a31c1465fb979f9bfada8c17b01e0bd1c850‚Äô tags=‚Äò[]‚Äô execution_count=46}\nTestData.isnull().sum()\n\nPclass        0\nName          0\nSex           0\nAge          86\nSibSp         0\nParch         0\nTicket        0\nFare          1\nCabin       327\nEmbarked      0\ndtype: int64\n\n:::\nComme g√©n√©ralement en machine learning, il va falloir traiter ces valeurs manquantes en imputant des valeurs : * dans le train dataset ( Age 177 manquants, Cabin 687 manquants, Embarked 2 manquants) * dans le test dataset ( Age 86 manquants, Cabin 327 manquants, Fare 1 manquant)\n\n\n\nAvant d‚Äôentrainer un mod√®le, il y a g√©n√©ralement une phase exploratoire du dataset que nous allons r√©duire ici au minimum. Il y a aussi selon le contexte du feature engineering qui est probablement l‚Äôune des composantes les plus compliqu√©es du machine learning, il s‚Äôagit selon le contexte et le probl√®me de cr√©er des variables qui ont un sens pour contribuer √† r√©soudre notre probl√©matique.\nIci, on peut en faire un exemple naturellement sur le nom de l‚Äôinvidu et instinctivement en extrayant le titre du nom des individus, mais cela peut etre beaucoup moins naturel selon les probl√®mes voire m√™me compl√®tement un √©tat de l‚Äôart si on prend l‚Äôexemple de la mod√©lisation des images pour le machine learning ou il s‚Äôagit, par exemple, de proposer des valeurs pond√©r√©es par sous division de partie d‚Äôimage.\n\n\nUne variable cat√©gorique qui donne une id√©e de la classe socio-√©conomique de la personne dont on donne un exemple avec seaborn pour visualiser la contribution https://seaborn.pydata.org/\nClairement chaque classe n‚Äôavait pas la meme chance de survie, n‚Äôest ce pas Jack?\n::: {#cell-12 .cell _cell_guid=‚Äòcd1e5c45-6156-4544-b705-b86ff92c6d38‚Äô _uuid=‚Äòe0f993a30dc3620a76fe189334bf418b575f2ae7‚Äô tags=‚Äò[]‚Äô execution_count=47}\nfig, axes=plt.subplots(1,2, figsize=(12, 6)) #layout matplotlib 1 ligne 2 colonnes taile 16*8\nfig1_pclass=sns.countplot(data=TrainingData, x =\"Pclass\",    ax=axes[0]).set_title(\"fr√©quence des Pclass\")\nfig2_pclass=sns.barplot(data=TrainingData, x= \"Pclass\",y= \"Survived\", ax=axes[1]).set_title(\"survie des Pclass\")\n\n\n\n\n\n\n\n:::\n\n\n\nNous allons essayer d‚Äôextraire du nom le titre qui peut etre pr√©sent dans le nom : * le titre s‚Äôil y e en a du type Mr, Miss, Mrs‚Ä¶ identifi√© comme le 1er mot apr√®s la ,.\nExemple : Heikkinen, Miss. Laina\n\n#affichage des valeurs distinctes obtenues pour le 1er mot apr√®s la , dans les 2 dataset\nprint(TrainingData['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0]).unique())\n\n['Mr.' 'Mrs.' 'Miss.' 'Master.' 'Don.' 'Rev.' 'Dr.' 'Mme.' 'Ms.' 'Major.'\n 'Lady.' 'Sir.' 'Mlle.' 'Col.' 'Capt.' 'the' 'Jonkheer.']\n\n\n::: {#cell-15 .cell _cell_guid=‚Äò80ac2756-c211-4e2c-96ba-f025afb801d7‚Äô _uuid=‚Äòd72df9859e01eaaab1a3ca2b867b8be42d01b4b3‚Äô tags=‚Äò[]‚Äô execution_count=49}\n# Extraction et ajout de la variable titre\nTrainingData['Title'] = TrainingData['Name'].apply( lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\nTestData['Title'] = TestData['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n# Suppression de la variable Titre\nTrainingData.drop(labels='Name', axis=1, inplace=True)\nTestData.drop(labels='Name', axis=1, inplace=True)\n#On note que Dona est pr√©sent dans le jeu de test √† pr√©dire mais dans les variables d'apprentissage on r√®gle ca a la mano\nTestData['Title'] = TestData['Title'].replace('Dona.', 'Mrs.')\n:::\n::: {#cell-16 .cell _cell_guid=‚Äòbaa77529-f9e6-476c-8f5a-beb7879429c6‚Äô _uuid=‚Äò96f88953ca5028e7293e610996abb700ecc59c4e‚Äô tags=‚Äò[]‚Äô execution_count=50}\nfx, axes = plt.subplots(2, 1, figsize=(15, 10))\nfig1_title = sns.countplot(data=TrainingData, x='Title', ax=axes[0]).set_title(\"Fr√©quence des titres\")\nfig2_title = sns.barplot(data=TrainingData, x='Title',y='Survived', ax=axes[1]).set_title(\"Taux de survie des titres\")\n\n\n\n\n\n\n\n:::\nL‚Äô√©chelle n‚Äôas pas exceptionnelle, mais on voit bien que certains titre comme Mrs, Miss, Master, Lady, Sir √©taient pr√©f√©rables.\nSinon tout le monde a vu le film et sait bien que le capitaine n‚Äôa pas surv√©cu..\n\n\n\n::: {#cell-19 .cell _cell_guid=‚Äò1477483f-069b-43f3-abff-d9764aa08238‚Äô _uuid=‚Äò4159c5b49bc74aa3792fbd86ef7136498dc4e12d‚Äô tags=‚Äò[]‚Äô execution_count=51}\nsns.distplot(a= TrainingData['Age'].dropna(axis = 0),bins = 15,hist_kws={'rwidth'     :0.7}).set_title(\"distribution de l'age\")\n\n/tmp/ipykernel_1098/3428679747.py:1: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(a= TrainingData['Age'].dropna(axis = 0),bins = 15,hist_kws={'rwidth'     :0.7}).set_title(\"distribution de l'age\")\n\n\nText(0.5, 1.0, \"distribution de l'age\")\n\n\n\n\n\n\n\n\n:::\n\n\n\n\nA partir de cette analyse rapide, on va proposer les transformations suivantes:\n\nAge: il nous faut traiter les Null, on impute √† la moyenne m√™me s‚Äôil y a mieux √† faire‚Ä¶\nEmbarked: il a 2 valeurs manquantes qu‚Äôon ajoute √† la valeur la plus fr√©quente S\nFare : m√™me sort que Age on impute √† la moyenne\nhasCabin : Le nombre de Null √©tant importante on va ajouter la variable 1 ou 0 pour ne retenir que si la personne avait une cabine ou non\n\n::: {#cell-22 .cell _cell_guid=‚Äòb954644f-19d5-4edc-acc8-cf943a58534b‚Äô _uuid=‚Äò74d6076bd9236daf2cefd6c32b79119f6437923d‚Äô tags=‚Äò[]‚Äô execution_count=52}\n# Voila nos donn√©es d'apprentissage\nTrainingData.head()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nTitle\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\nMr.\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\nMrs.\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\nMiss.\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\nMrs.\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\nMr.\n\n\n\n\n\n\n:::\n\n# Age\nmeanAge=round(TrainingData['Age'].mean())\nTrainingData['Age'] = TrainingData['Age'].fillna(meanAge)\nTestData['Age'] = TrainingData['Age'].fillna(meanAge)\n\n\n# Sex, Title et Embarked\nlabel_encoder_sex = LabelEncoder()\nlabel_encoder_title = LabelEncoder()\nlabel_encoder_embarked = LabelEncoder()\nTrainingData['Sex'] = label_encoder_sex.fit_transform(TrainingData['Sex'].values)\nTrainingData['Title'] = label_encoder_title.fit_transform(TrainingData['Sex'].values)\nTrainingData['Embarked'] = label_encoder_embarked.fit_transform(TrainingData['Sex'].values)\n\n::: {#cell-25 .cell _cell_guid=‚Äòbb967c8a-c320-4a50-a121-d1b743c3bda3‚Äô _uuid=‚Äòd71f618046995492830250c1dc32724d1bd3b9a0‚Äô tags=‚Äò[]‚Äô execution_count=55}\nTrainingData['Embarked'] = TrainingData['Embarked'].fillna('S')\nTestData['Embarked'] = TestData['Embarked'].fillna('S')\n:::\n::: {#cell-26 .cell _cell_guid=‚Äò48f02158-1296-452d-91da-608d5fe57766‚Äô _uuid=‚Äò4bad1ecdea38f903418030df660ab2bcf7ac6933‚Äô tags=‚Äò[]‚Äô execution_count=56}\nTestData['Fare']=TestData['Fare'].fillna(TestData['Fare'].mean())\n:::\n::: {#cell-27 .cell _cell_guid=‚Äò0f4bf4d5-5653-45a9-8aff-8363940e2a2a‚Äô _uuid=‚Äò09fea57beddf9b0a3f29c40d89d8097be23046ab‚Äô tags=‚Äò[]‚Äô execution_count=57}\n# Making a new feature hasCabin which is 1 if cabin is available else 0\nTrainingData['hasCabin'] = TrainingData.Cabin.notnull().astype(int)\nTestData['hasCabin'] = TestData.Cabin.notnull().astype(int)\n:::\n\nTrainingData['Ticket_Len'] = TrainingData['Ticket'].apply(lambda x: len(x))\nTestData['Ticket_Len'] = TestData['Ticket'].apply(lambda x: len(x))\nTrainingData.drop(labels='Ticket', axis=1, inplace=True)\nTestData.drop(labels='Ticket', axis=1, inplace=True)\n\n\n\n\nOn va maintenant passer du monde Pandas au monde Numpy pour servir d‚Äôinput √† l‚Äôapprentissage pour cela on isole la variable cible\n::: {#cell-31 .cell _cell_guid=‚Äò6ef57b0c-9723-4f40-b8c3-e2be60784f91‚Äô _uuid=‚Äò9401c53ce8a950e7aebf3fbf62faf29c5788bf65‚Äô tags=‚Äò[]‚Äô execution_count=59}\nTrainingData.drop(labels='Cabin', axis=1, inplace=True)\nTestData.drop(labels='Cabin', axis=1, inplace=True)\ny = TrainingData.iloc[:, 0].values\nX = TrainingData.iloc[:, 1:12].values\n:::\n::: {#cell-32 .cell _cell_guid=‚Äòd0b132d9-ecae-4ea0-b5f1-64fc90b8a358‚Äô _uuid=‚Äò6787d0472b874437a300ac0d32e20eb3c666de09‚Äô tags=‚Äò[]‚Äô execution_count=62}\n# Feature Scaling\nscaler_x = MinMaxScaler((-1,1))\nX = scaler_x.fit_transform(X)\n:::\nOn split notre dataset d‚Äôapprentisage pour faire de la validation crois√©e une partie pour apprendre une partie pour regarder le score.\nPrenons arbitrairement 10% du dataset en test et 90% pour l‚Äôapprentissage.\n::: {#cell-34 .cell _cell_guid=‚Äòb768a96d-8f55-440f-b268-26fb613acc59‚Äô _uuid=‚Äòdfcfa465aa94260c2db0a6c87c9dea05cc0c45de‚Äô tags=‚Äò[]‚Äô execution_count=63}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)\n:::\n\njetonapi = \"$trotskitueleski1917\""
  },
  {
    "objectID": "notebooks/titanic.html#donn√©es",
    "href": "notebooks/titanic.html#donn√©es",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "On va utiliser la librairie pandas pour lire les donn√©es, on y a d√©pos√© le jeu de donn√©e disponible sur Kaggle :\n\nle train.csv contient les donn√©es d‚Äôapprentissage, c‚Äôest-√†-dire les variables d√©crivants des individus et s‚Äôils ont surv√©cus ou non ;\nle test.csv contient uniquement la description d‚Äôindividu dont il faut pr√©dire les chances de survie.\n\n::: {#cell-3 .cell _cell_guid=‚Äò096ddef0-fc1a-4a65-bd56-82e5b3ef3d96‚Äô _uuid=‚Äòfdcb49f7845aae42bceb3216b3a2f09374c762ba‚Äô tags=‚Äò[]‚Äô execution_count=43}\nimport os\n#print(os.getcwd())\nos.chdir('/home/coder/work/ensae-reproductibilite-application')\n\nTrainingData = pd.read_csv('train.csv')\nTestData = pd.read_csv('test.csv')\nTrainingData = TrainingData.drop(columns = \"PassengerId\")\nTestData = TestData.drop(columns = \"PassengerId\")\n:::\n::: {#cell-4 .cell _cell_guid=‚Äòb02f3b71-dd0f-4c22-8e48-fc4ee8616e21‚Äô _uuid=‚Äò5ceeb0b9a9ddd42db685a5e5f0503e01788a016a‚Äô tags=‚Äò[]‚Äô execution_count=44}\nTrainingData.head()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n:::\nAvec la m√©thode .info, on pourrait v√©rifier que notre dataset a :\n\n7 variables num√©riques : PassengerId, Survived, Pclass, Age, SibSp, Parch, Fare\n\ndont PassengerId qui est l‚Äôidentifiant du passager dans le dataset\ndont Survived qui est la variable √† pr√©dire la variable ‚Äúcible‚Äù\ndont PClass qui est une indication de la strate socio √©conomique\ndont SibSp et Parch qui permettent de d√©terminer la situation familiale (√©poux, m√®re, fille‚Ä¶)\nFare qui est un prix.\n\n5 variables non num√©riques : Name, Sex, Ticket un identifiant de ticket, Cabin un identifiant de cabin, Embarked le port d‚Äôembarquation (C = Cherbourg, Q = Queenstown, S = Southampton)\n\nRecherchons s‚Äôil y a des valeurs manquantes dans ces 2 datasets"
  },
  {
    "objectID": "notebooks/titanic.html#valeurs-manquantes",
    "href": "notebooks/titanic.html#valeurs-manquantes",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "::: {#cell-7 .cell _cell_guid=‚Äòf6bd235e-5670-4d21-b0eb-bececfc1757a‚Äô _uuid=‚Äò6c44f4bd0762061bedd908dcbe854b14ae9f0966‚Äô tags=‚Äò[]‚Äô execution_count=45}\nTrainingData.isnull().sum()\n\nSurvived      0\nPclass        0\nName          0\nSex           0\nAge         177\nSibSp         0\nParch         0\nTicket        0\nFare          0\nCabin       687\nEmbarked      2\ndtype: int64\n\n:::\n::: {#cell-8 .cell _cell_guid=‚Äòb12b1a12-5563-44ef-90a7-4a77b0a0d3f3‚Äô _uuid=‚Äò7f46a31c1465fb979f9bfada8c17b01e0bd1c850‚Äô tags=‚Äò[]‚Äô execution_count=46}\nTestData.isnull().sum()\n\nPclass        0\nName          0\nSex           0\nAge          86\nSibSp         0\nParch         0\nTicket        0\nFare          1\nCabin       327\nEmbarked      0\ndtype: int64\n\n:::\nComme g√©n√©ralement en machine learning, il va falloir traiter ces valeurs manquantes en imputant des valeurs : * dans le train dataset ( Age 177 manquants, Cabin 687 manquants, Embarked 2 manquants) * dans le test dataset ( Age 86 manquants, Cabin 327 manquants, Fare 1 manquant)"
  },
  {
    "objectID": "notebooks/titanic.html#un-peu-dexploration-et-de-feature-engineering",
    "href": "notebooks/titanic.html#un-peu-dexploration-et-de-feature-engineering",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "Avant d‚Äôentrainer un mod√®le, il y a g√©n√©ralement une phase exploratoire du dataset que nous allons r√©duire ici au minimum. Il y a aussi selon le contexte du feature engineering qui est probablement l‚Äôune des composantes les plus compliqu√©es du machine learning, il s‚Äôagit selon le contexte et le probl√®me de cr√©er des variables qui ont un sens pour contribuer √† r√©soudre notre probl√©matique.\nIci, on peut en faire un exemple naturellement sur le nom de l‚Äôinvidu et instinctivement en extrayant le titre du nom des individus, mais cela peut etre beaucoup moins naturel selon les probl√®mes voire m√™me compl√®tement un √©tat de l‚Äôart si on prend l‚Äôexemple de la mod√©lisation des images pour le machine learning ou il s‚Äôagit, par exemple, de proposer des valeurs pond√©r√©es par sous division de partie d‚Äôimage.\n\n\nUne variable cat√©gorique qui donne une id√©e de la classe socio-√©conomique de la personne dont on donne un exemple avec seaborn pour visualiser la contribution https://seaborn.pydata.org/\nClairement chaque classe n‚Äôavait pas la meme chance de survie, n‚Äôest ce pas Jack?\n::: {#cell-12 .cell _cell_guid=‚Äòcd1e5c45-6156-4544-b705-b86ff92c6d38‚Äô _uuid=‚Äòe0f993a30dc3620a76fe189334bf418b575f2ae7‚Äô tags=‚Äò[]‚Äô execution_count=47}\nfig, axes=plt.subplots(1,2, figsize=(12, 6)) #layout matplotlib 1 ligne 2 colonnes taile 16*8\nfig1_pclass=sns.countplot(data=TrainingData, x =\"Pclass\",    ax=axes[0]).set_title(\"fr√©quence des Pclass\")\nfig2_pclass=sns.barplot(data=TrainingData, x= \"Pclass\",y= \"Survived\", ax=axes[1]).set_title(\"survie des Pclass\")\n\n\n\n\n\n\n\n:::\n\n\n\nNous allons essayer d‚Äôextraire du nom le titre qui peut etre pr√©sent dans le nom : * le titre s‚Äôil y e en a du type Mr, Miss, Mrs‚Ä¶ identifi√© comme le 1er mot apr√®s la ,.\nExemple : Heikkinen, Miss. Laina\n\n#affichage des valeurs distinctes obtenues pour le 1er mot apr√®s la , dans les 2 dataset\nprint(TrainingData['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0]).unique())\n\n['Mr.' 'Mrs.' 'Miss.' 'Master.' 'Don.' 'Rev.' 'Dr.' 'Mme.' 'Ms.' 'Major.'\n 'Lady.' 'Sir.' 'Mlle.' 'Col.' 'Capt.' 'the' 'Jonkheer.']\n\n\n::: {#cell-15 .cell _cell_guid=‚Äò80ac2756-c211-4e2c-96ba-f025afb801d7‚Äô _uuid=‚Äòd72df9859e01eaaab1a3ca2b867b8be42d01b4b3‚Äô tags=‚Äò[]‚Äô execution_count=49}\n# Extraction et ajout de la variable titre\nTrainingData['Title'] = TrainingData['Name'].apply( lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\nTestData['Title'] = TestData['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n# Suppression de la variable Titre\nTrainingData.drop(labels='Name', axis=1, inplace=True)\nTestData.drop(labels='Name', axis=1, inplace=True)\n#On note que Dona est pr√©sent dans le jeu de test √† pr√©dire mais dans les variables d'apprentissage on r√®gle ca a la mano\nTestData['Title'] = TestData['Title'].replace('Dona.', 'Mrs.')\n:::\n::: {#cell-16 .cell _cell_guid=‚Äòbaa77529-f9e6-476c-8f5a-beb7879429c6‚Äô _uuid=‚Äò96f88953ca5028e7293e610996abb700ecc59c4e‚Äô tags=‚Äò[]‚Äô execution_count=50}\nfx, axes = plt.subplots(2, 1, figsize=(15, 10))\nfig1_title = sns.countplot(data=TrainingData, x='Title', ax=axes[0]).set_title(\"Fr√©quence des titres\")\nfig2_title = sns.barplot(data=TrainingData, x='Title',y='Survived', ax=axes[1]).set_title(\"Taux de survie des titres\")\n\n\n\n\n\n\n\n:::\nL‚Äô√©chelle n‚Äôas pas exceptionnelle, mais on voit bien que certains titre comme Mrs, Miss, Master, Lady, Sir √©taient pr√©f√©rables.\nSinon tout le monde a vu le film et sait bien que le capitaine n‚Äôa pas surv√©cu..\n\n\n\n::: {#cell-19 .cell _cell_guid=‚Äò1477483f-069b-43f3-abff-d9764aa08238‚Äô _uuid=‚Äò4159c5b49bc74aa3792fbd86ef7136498dc4e12d‚Äô tags=‚Äò[]‚Äô execution_count=51}\nsns.distplot(a= TrainingData['Age'].dropna(axis = 0),bins = 15,hist_kws={'rwidth'     :0.7}).set_title(\"distribution de l'age\")\n\n/tmp/ipykernel_1098/3428679747.py:1: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(a= TrainingData['Age'].dropna(axis = 0),bins = 15,hist_kws={'rwidth'     :0.7}).set_title(\"distribution de l'age\")\n\n\nText(0.5, 1.0, \"distribution de l'age\")\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "notebooks/titanic.html#encoder-les-donn√©es-imput√©es-ou-transform√©es.",
    "href": "notebooks/titanic.html#encoder-les-donn√©es-imput√©es-ou-transform√©es.",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "A partir de cette analyse rapide, on va proposer les transformations suivantes:\n\nAge: il nous faut traiter les Null, on impute √† la moyenne m√™me s‚Äôil y a mieux √† faire‚Ä¶\nEmbarked: il a 2 valeurs manquantes qu‚Äôon ajoute √† la valeur la plus fr√©quente S\nFare : m√™me sort que Age on impute √† la moyenne\nhasCabin : Le nombre de Null √©tant importante on va ajouter la variable 1 ou 0 pour ne retenir que si la personne avait une cabine ou non\n\n::: {#cell-22 .cell _cell_guid=‚Äòb954644f-19d5-4edc-acc8-cf943a58534b‚Äô _uuid=‚Äò74d6076bd9236daf2cefd6c32b79119f6437923d‚Äô tags=‚Äò[]‚Äô execution_count=52}\n# Voila nos donn√©es d'apprentissage\nTrainingData.head()\n\n\n\n\n\n\n\n\nSurvived\nPclass\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nTitle\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\nMr.\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\nMrs.\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\nMiss.\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\nMrs.\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\nMr.\n\n\n\n\n\n\n:::\n\n# Age\nmeanAge=round(TrainingData['Age'].mean())\nTrainingData['Age'] = TrainingData['Age'].fillna(meanAge)\nTestData['Age'] = TrainingData['Age'].fillna(meanAge)\n\n\n# Sex, Title et Embarked\nlabel_encoder_sex = LabelEncoder()\nlabel_encoder_title = LabelEncoder()\nlabel_encoder_embarked = LabelEncoder()\nTrainingData['Sex'] = label_encoder_sex.fit_transform(TrainingData['Sex'].values)\nTrainingData['Title'] = label_encoder_title.fit_transform(TrainingData['Sex'].values)\nTrainingData['Embarked'] = label_encoder_embarked.fit_transform(TrainingData['Sex'].values)\n\n::: {#cell-25 .cell _cell_guid=‚Äòbb967c8a-c320-4a50-a121-d1b743c3bda3‚Äô _uuid=‚Äòd71f618046995492830250c1dc32724d1bd3b9a0‚Äô tags=‚Äò[]‚Äô execution_count=55}\nTrainingData['Embarked'] = TrainingData['Embarked'].fillna('S')\nTestData['Embarked'] = TestData['Embarked'].fillna('S')\n:::\n::: {#cell-26 .cell _cell_guid=‚Äò48f02158-1296-452d-91da-608d5fe57766‚Äô _uuid=‚Äò4bad1ecdea38f903418030df660ab2bcf7ac6933‚Äô tags=‚Äò[]‚Äô execution_count=56}\nTestData['Fare']=TestData['Fare'].fillna(TestData['Fare'].mean())\n:::\n::: {#cell-27 .cell _cell_guid=‚Äò0f4bf4d5-5653-45a9-8aff-8363940e2a2a‚Äô _uuid=‚Äò09fea57beddf9b0a3f29c40d89d8097be23046ab‚Äô tags=‚Äò[]‚Äô execution_count=57}\n# Making a new feature hasCabin which is 1 if cabin is available else 0\nTrainingData['hasCabin'] = TrainingData.Cabin.notnull().astype(int)\nTestData['hasCabin'] = TestData.Cabin.notnull().astype(int)\n:::\n\nTrainingData['Ticket_Len'] = TrainingData['Ticket'].apply(lambda x: len(x))\nTestData['Ticket_Len'] = TestData['Ticket'].apply(lambda x: len(x))\nTrainingData.drop(labels='Ticket', axis=1, inplace=True)\nTestData.drop(labels='Ticket', axis=1, inplace=True)"
  },
  {
    "objectID": "notebooks/titanic.html#transformation-en-array",
    "href": "notebooks/titanic.html#transformation-en-array",
    "title": "Prediction de la survie d‚Äôun individu sur le Titanic üö¢",
    "section": "",
    "text": "On va maintenant passer du monde Pandas au monde Numpy pour servir d‚Äôinput √† l‚Äôapprentissage pour cela on isole la variable cible\n::: {#cell-31 .cell _cell_guid=‚Äò6ef57b0c-9723-4f40-b8c3-e2be60784f91‚Äô _uuid=‚Äò9401c53ce8a950e7aebf3fbf62faf29c5788bf65‚Äô tags=‚Äò[]‚Äô execution_count=59}\nTrainingData.drop(labels='Cabin', axis=1, inplace=True)\nTestData.drop(labels='Cabin', axis=1, inplace=True)\ny = TrainingData.iloc[:, 0].values\nX = TrainingData.iloc[:, 1:12].values\n:::\n::: {#cell-32 .cell _cell_guid=‚Äòd0b132d9-ecae-4ea0-b5f1-64fc90b8a358‚Äô _uuid=‚Äò6787d0472b874437a300ac0d32e20eb3c666de09‚Äô tags=‚Äò[]‚Äô execution_count=62}\n# Feature Scaling\nscaler_x = MinMaxScaler((-1,1))\nX = scaler_x.fit_transform(X)\n:::\nOn split notre dataset d‚Äôapprentisage pour faire de la validation crois√©e une partie pour apprendre une partie pour regarder le score.\nPrenons arbitrairement 10% du dataset en test et 90% pour l‚Äôapprentissage.\n::: {#cell-34 .cell _cell_guid=‚Äòb768a96d-8f55-440f-b268-26fb613acc59‚Äô _uuid=‚Äòdfcfa465aa94260c2db0a6c87c9dea05cc0c45de‚Äô tags=‚Äò[]‚Äô execution_count=63}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)\n:::\n\njetonapi = \"$trotskitueleski1917\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jake avait-il une chance de survivre ?",
    "section": "",
    "text": "Gr√¢ce √† notre mod√®le, on peut r√©pondre √† cette question cruciale:\nJake √©tait-il condamn√© d√®s le d√©but ?\nviewof gender = Inputs.radio(\n    new Map([\n        [\"Jake\", \"male\"], \n        [\"Rose\", \"female\"]\n    ]), \n    {\n        value: \"male\", \n        label: html`&lt;b&gt;Personnage&lt;/b&gt;`,\n        format: ([name, value]) =&gt; {\n            let imageUrl = value == \"male\" ? \n                \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRM_MvbRXood7sNkM9z5OEVk_AeIhmWwLon1vvBuIYjOpCD394wNGdoAYloymicchUpgZU&usqp=CAU\" : \n                \"https://static1.purebreak.com/articles/4/18/97/24/@/705016-titanic-decouvrez-quelle-autre-actrice-diapo-3.jpg\";\n            return html`&lt;div style=\"text-align: center;\"&gt;\n                            &lt;span style=\"display: block; text-transform: capitalize;\"&gt;${value == \"male\" ? \"Jake\" : \"Rose\"}&lt;/span&gt;\n                            &lt;img src=\"${imageUrl}\" style=\"width: 200px; height: auto; display: block; margin: 0 auto;\"&gt;\n                        &lt;/div&gt;`;\n        }\n    }\n)\nviewof age = Inputs.range([0, 100], {step: 1, value: 19, label: \"√Çge au moment de l'accident\"})\nviewof class_boat = Inputs.radio(\n    new Map([[\"Premi√®re\", 1], [\"Deuxi√®me\", 2], [\"Troisi√®me\", 3]]),\n    {value: default_class, label: \"Classe sur le bateau\"}\n)\nPr√©diction de notre mod√®le:\nd3.json(prediction)\nprediction = `https://titanic.kub.sspcloud.fr/predict?pclass=${class_boat}&sex=${gender}&age=${age}&sib_sp=1&parch=1&fare=16.5&embarked=S&title=${title}&has_cabin=1&ticket_len=7`\ntitle = gender == \"male\" ? \"Mr.\" : \"Miss.\"\ndefault_class = gender == \"male\" ? 3 : 1"
  },
  {
    "objectID": "index.html#documentation-de-lapi",
    "href": "index.html#documentation-de-lapi",
    "title": "Jake avait-il une chance de survivre ?",
    "section": "Documentation de l‚ÄôAPI",
    "text": "Documentation de l‚ÄôAPI\nRetrouver l‚ÄôAPI sur https://titanic.kub.sspcloud.fr/docs pour jouer avec d‚Äôautres exemples."
  }
]